Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
Return:

[
   [5,4,11,2],
   [5,8,4,5]
]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> res;
    int x;
void printPaths(TreeNode* node)  
{  
    int path[1000];  
    printPathsRecur(node, path, 0);  
}  
void printPathsRecur(TreeNode* node, int path[], int pathLen)  
{  
    if (node == NULL)  
        return;  
      
    /* append this node to the path array */
    path[pathLen] = node->val;  
    pathLen++;  
      
    /* it's a leaf, so print the path that led to here */
    if (node->left == NULL && node->right == NULL)  
    {  
        printArray(path, pathLen);  
    }  
    else
    {  
        /* otherwise try both subtrees */
        printPathsRecur(node->left, path, pathLen);  
        printPathsRecur(node->right, path, pathLen);  
    }  
} 
void printArray(int ints[], int len)  
{  
    if(accumulate(ints,ints+len,0)==x)
    {
       vector<int> arr(ints,ints+len);
        res.push_back(arr);
    }
        //res.push_back()
} 
    vector<vector<int>> pathSum(TreeNode* root, int sum) 
    {
        x=sum;
        printPaths(root);
        return res;
    }
};
